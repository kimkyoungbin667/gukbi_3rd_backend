<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.animal.mapper.UserMapper">
    <insert id="registerUser" parameterType="com.project.animal.dto.user.RegisterDTO">
        INSERT INTO tb_user (user_name, user_email, user_password,
                             user_birth, is_active, is_admin, kakao_id, social_type, user_profile_url)
        VALUES (#{userName}, #{userEmail}, #{userPassword},
                #{userBirth}, TRUE, FALSE, #{kakaoId}, #{socialType}, #{userProfileUrl})
    </insert>

    <!-- 로그인 시 사용할 메서드 -->
    <select id="findByEmail" resultType="com.project.animal.model.User">
        SELECT user_idx, user_email, user_password, is_admin, is_active
        FROM tb_user
        WHERE user_email = #{userEmail}
    </select>

    <!-- 사용자 프로필 정보 조회 -->
    <select id="findUserById" resultType="com.project.animal.model.User">
        SELECT
            user_idx,
            user_name,
            user_nickname,
            user_email,
            user_birth,
            user_password,
            user_profile_url,
            social_type,
        kakao_access_token,   <!-- 추가 -->
        kakao_token_expiry
        FROM tb_user
        WHERE user_idx = #{userId}
    </select>

    <update id="updateUserProfile" parameterType="com.project.animal.model.User">
        UPDATE tb_user
        SET
            user_nickname = #{userNickname},
            user_profile_url = #{userProfileUrl},
            kakao_access_token = #{kakaoAccessToken},
            kakao_token_expiry = #{kakaoTokenExpiry}
        WHERE user_idx = #{userIdx}
    </update>

    <select id="findNicknameById" resultType="String">
        SELECT user_nickname
        FROM tb_user
        WHERE user_idx = #{userId}
    </select>

    <insert id="saveRefreshToken">
        INSERT INTO tb_refresh_token (user_id, refresh_token, expires_at)
        VALUES (#{userId}, #{refreshToken}, NOW() + INTERVAL 7 DAY)
            ON DUPLICATE KEY UPDATE
                                 refresh_token = #{refreshToken},
                                 expires_at = NOW() + INTERVAL 7 DAY;
    </insert>

    <select id="findRefreshTokenByUserId" resultType="String">
        SELECT refresh_token
        FROM tb_refresh_token
        WHERE user_id = #{userId}
    </select>

    <delete id="deleteRefreshToken">
        DELETE FROM tb_refresh_token
        WHERE user_id = #{userId}
    </delete>

    <!-- 비밀번호 변경 -->
    <update id="updateUserPassword" parameterType="com.project.animal.model.User">
        UPDATE tb_user
        SET user_password = #{userPassword}
        WHERE user_idx = #{userIdx}
    </update>

    <!-- 회원 탈퇴 -->
    <update id="deactivateUser" parameterType="Long">
        UPDATE tb_user
        SET is_active = FALSE
        WHERE user_idx = #{userId};
    </update>

    <!-- 카카오 ID로 사용자 조회 -->
    <select id="findByKakaoId" parameterType="string" resultType="com.project.animal.model.User">
        SELECT *
        FROM tb_user
        WHERE kakao_id = #{kakaoId}
    </select>

    <!-- 사용자 정보 업데이트 -->
    <update id="updateUser">
        UPDATE tb_user
        SET
        kakao_access_token = #{kakaoAccessToken},
        kakao_refresh_token = #{kakaoRefreshToken},  <!-- 리프레시 토큰 저장 -->
        kakao_token_expiry = #{kakaoTokenExpiry},    <!-- 토큰 만료 시간 저장 -->
        updated_at = NOW()                          <!-- 수정 시간 기록 -->
        WHERE user_idx = #{userIdx}
    </update>

    <select id="isKakaoIdExists" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM tb_user
        WHERE kakao_id = #{kakaoId}
    </select>

    <select id="isNicknameAvailable" resultType="boolean">
        SELECT COUNT(*) = 0
        FROM tb_user
        WHERE user_nickname = #{nickname}
    </select>

    <!-- 특정 사용자가 작성한 게시글 가져오기 -->
    <select id="getUserPosts" resultType="map">
        SELECT
        tb_board.board_idx,
        tb_board.title,
        tb_board.content,
        tb_board.view_count,
        tb_board.is_deleted,
        tb_board.created_at,
        tb_user.user_name AS author_name,
        tb_user.user_email AS author_email
        FROM tb_board
        JOIN tb_user ON tb_board.created_by_user_idx = tb_user.user_idx
        WHERE tb_board.is_deleted = 0
        AND tb_board.created_by_user_idx = #{userId}  <!-- 특정 사용자 ID -->
        ORDER BY tb_board.created_at DESC
    </select>


</mapper>
