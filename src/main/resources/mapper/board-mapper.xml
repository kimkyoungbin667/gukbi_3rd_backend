<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.animal.mapper.BoardMapper">

    <select id="getBoardList" resultType="BoardPostListResDTO">
        SELECT
            b.board_idx AS boardIdx, -- 게시글 ID
            b.title AS title,        -- 게시글 제목
            COALESCE(l.likeCount, 0) AS likeCount, -- 좋아요 수 (tb_like에 값이 없을 경우 0)
            b.view_count AS viewCount, -- 조회수
            u.user_nickname AS createdByUserNickname, -- 작성자 닉네임
            DATE_FORMAT(b.created_at, '%Y-%m-%d %H:%i:%s') AS createdAt -- 작성일 (년-월-일 시:분:초)
        FROM
            tb_board b
                JOIN tb_user u ON b.created_by_user_idx = u.user_idx -- 작성자 정보와 조인
                LEFT JOIN (
                SELECT
                    board_idx,                -- 게시글 ID
                    COUNT(*) AS likeCount     -- 게시글별 좋아요 수
                FROM
                    tb_like
                GROUP BY
                    board_idx                 -- 게시글별로 그룹화
            ) l ON b.board_idx = l.board_idx -- 좋아요 수와 조인
        WHERE
            b.is_deleted = 0 -- 삭제되지 않은 게시글만 조회
        ORDER BY
            b.created_at DESC -- 최신순 정렬
            LIMIT #{limit} OFFSET #{offset}; -- 페이징 처리


    </select>

    <select id="getBoardListCount" resultType="Integer">
        SELECT COUNT(*) AS totalCount
        FROM tb_board
        WHERE is_deleted = 0;
    </select>

    <insert id="createBoardPost" parameterType="BoardPostCreateReqDTO" keyProperty="boardIdx" useGeneratedKeys="true" >
        INSERT tb_board(
            title,
            content,
            created_by_user_idx
        )
        VALUES(
        #{title},
        #{content},
        #{authorIdx}
        )
    </insert>

    <insert id="insertBoardImage">
        INSERT INTO tb_board_image (
            board_idx,
            image_url
        ) VALUES (
                     #{boardIdx},
                     #{imagePath}
                 )
    </insert>

    <select id="readBoardPost" parameterType="BoardPostReadReqDTO" resultType="BoardPostReadResDTO">
        SELECT
            b.board_idx AS boardIdx,                     -- 게시글 인덱스
            b.title AS title,                            -- 제목
            b.content AS content,                        -- 내용
            COALESCE(l.likeCount, 0) AS likeCount,       -- 좋아요 수 (없을 경우 0으로 대체)
            b.is_deleted AS isDeleted,                   -- 삭제 여부
            DATE_FORMAT(b.created_at, '%Y-%m-%d %H:%i:%s') AS createdAt, -- 작성일 (년-월-일 시:분:초)
            b.created_by_user_idx AS createdByUserIdx,   -- 작성자 인덱스
            u.user_nickname AS createdByUserNickname,    -- 작성자 닉네임
            b.view_count AS viewCount,                   -- 조회수
            CASE
                WHEN EXISTS (
                    SELECT 1
                    FROM tb_like tl
                    WHERE tl.board_idx = b.board_idx AND tl.user_idx = #{userIdx} -- 현재 사용자의 좋아요 여부 확인
                ) THEN TRUE
                ELSE FALSE
                END AS isLiked,                              -- 현재 사용자가 좋아요를 눌렀는지 여부
            GROUP_CONCAT(i.image_url) AS imagePath       -- 게시글에 포함된 이미지 URL (콤마로 연결)
        FROM
            tb_board b
                LEFT JOIN tb_user u ON b.created_by_user_idx = u.user_idx
                LEFT JOIN (
                SELECT
                    board_idx,
                    COUNT(*) AS likeCount
                FROM
                    tb_like
                GROUP BY
                    board_idx
            ) l ON b.board_idx = l.board_idx -- 좋아요 수 조인
                LEFT JOIN tb_board_image i ON b.board_idx = i.board_idx -- 이미지 테이블 조인
        WHERE
            b.board_idx = #{boardIdx} AND b.is_deleted = 0
        GROUP BY
            b.board_idx; -- 게시글별로 그룹화

    </select>

    <update id="updateBoardPost" parameterType="BoardPostUpdateReqDTO">
        UPDATE tb_board
        SET content = #{content}, updated_by_user_idx = #{authorIdx}
        WHERE board_idx = #{boardIdx}
    </update>

    <update id="deleteBoardPost" parameterType="Long">
        UPDATE tb_board
        SET is_deleted = 1
        WHERE board_idx = #{boardIdx}
    </update>


    <update id="increaseView" parameterType="Long">
        UPDATE tb_board
        SET view_count = view_count + 1
        WHERE board_idx = #{boardIdx}
    </update>


    <select id="readBoardComments" resultType="BoardPostReadCommentsResDTO" parameterType="long">
        SELECT
            c.comment_idx AS commentIdx,
            c.content AS content,
            c.author_idx AS authorIdx,
            c.parent_idx AS parentIdx,
            u.user_nickname AS authorNickname,
            u.user_profile_url AS authorProfileUrl
        FROM tb_comment c
                 LEFT JOIN tb_user u ON c.author_idx = u.user_idx
        WHERE c.board_idx = #{boardIdx}
    </select>

    <insert id="createBoardComment" parameterType="BoardPostCreateCommentReqDTO">
        INSERT INTO tb_comment(board_idx, author_idx, content)
        VALUES(#{boardIdx}, #{authorIdx}, #{comment})
    </insert>

    <insert id="createBoardReply" parameterType="BoardPostCreateReplyReqDTO">
        INSERT INTO tb_comment(board_idx, author_idx, content, parent_idx)
        VALUES(
                  #{boardIdx},
                  #{authorIdx},
                  #{comment},
                  #{parentIdx}
              )
    </insert>

    <select id="isLikedPost" resultType="Boolean">
        SELECT
            CASE
                WHEN COUNT(*) > 0 THEN TRUE
                ELSE FALSE
                END AS isLiked
        FROM tb_like
        WHERE user_idx = #{userIdx} AND board_idx = #{boardIdx}
    </select>

    <delete id="downBoardPostLike" parameterType="boardPostUpLikeReqDTO">
        DELETE FROM tb_like
        WHERE user_idx = #{userIdx} AND board_idx = #{boardIdx}

    </delete>

    <insert id="upBoardPostLike" parameterType="boardPostUpLikeReqDTO">
        INSERT INTO tb_like(user_idx, board_idx)
        VALUES(#{userIdx}, #{boardIdx})
    </insert>

    <select id="findImagesByBoardIdx" parameterType="Long" resultType="String">
        SELECT image_url
        FROM tb_board_image
        WHERE board_idx = #{boardIdx}
    </select>

    <delete id="deleteImagesByBoardIdxAndImageList" parameterType="map">
        DELETE FROM tb_board_image
        WHERE board_idx = #{boardIdx}
        AND image_url IN
        <foreach item="image" index="index" collection="imagesToDelete" open="(" separator="," close=")">
            #{image}
        </foreach>
    </delete>

    <insert id="insertImages" parameterType="map">
        INSERT INTO tb_board_image (board_idx, image_url)
        VALUES
        <foreach item="image" index="index" collection="uploadedImages" separator=",">
            (#{boardIdx}, #{image})
        </foreach>
    </insert>

</mapper>